{"version":3,"sources":["index.js"],"names":["tf","require","names","App","_React$Component","_getPrototypeOf2","_this","Object","D_x_tfjs_yolov5_example_main_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","this","_len","arguments","length","args","Array","_key","D_x_tfjs_yolov5_example_main_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","D_x_tfjs_yolov5_example_main_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","apply","concat","state","model","preview","predictions","onDrop","accepted","rejected","links","setState","cropToCanvas","image","canvas","ctx","naturalWidth","naturalHeight","clearRect","width","height","fillStyle","fillRect","ratio","Math","min","newWidth","round","newHeight","drawImage","onImageChange","e","c","document","getElementById","getContext","target","_this$state$model$inp","inputs","shape","slice","_this$state$model$inp2","D_x_tfjs_yolov5_example_main_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","modelWidth","modelHeight","input","tidy","resizeBilinear","browser","fromPixels","div","expandDims","executeAsync","then","res","font","textBaseline","i","_res","boxes","scores","classes","valid_detections","boxes_data","dataSync","scores_data","classes_data","valid_detections_data","dispose","_boxes_data$slice","_boxes_data$slice2","x1","y1","x2","y2","klass","score","toFixed","strokeStyle","lineWidth","strokeRect","textWidth","measureText","textHeight","parseInt","_boxes_data$slice3","_boxes_data$slice4","fillText","D_x_tfjs_yolov5_example_main_node_modules_babel_runtime_helpers_esm_inherits__WEBPACK_IMPORTED_MODULE_5__","D_x_tfjs_yolov5_example_main_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_2__","key","value","_this2","loadGraphModel","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","react_magic_dropzone__WEBPACK_IMPORTED_MODULE_8___default","accept","multiple","alt","onLoad","src","id","React","Component","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.dfb62db0.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport MagicDropzone from \"react-magic-dropzone\";\n\nimport \"./styles.css\";\nconst tf = require('@tensorflow/tfjs');\n\nconst weights = '/web_model/model.json';\n\nconst names = ['helmet', 'no_helmet', 'number', 'rider']\n\nclass App extends React.Component {\n  state = {\n    model: null,\n    preview: \"\",\n    predictions: []\n  };\n\n  componentDidMount() {\n    tf.loadGraphModel(weights).then(model => {\n      this.setState({\n        model: model\n      });\n    });\n  }\n\n  onDrop = (accepted, rejected, links) => {\n    this.setState({ preview: accepted[0].preview || links[0] });\n  };\n\n  cropToCanvas = (image, canvas, ctx) => {\n    const naturalWidth = image.naturalWidth;\n    const naturalHeight = image.naturalHeight;\n\n    // canvas.width = image.width;\n    // canvas.height = image.height;\n\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n    ctx.fillStyle = \"#000000\";\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\n    const ratio = Math.min(canvas.width / image.naturalWidth, canvas.height / image.naturalHeight);\n    const newWidth = Math.round(naturalWidth * ratio);\n    const newHeight = Math.round(naturalHeight * ratio);\n    ctx.drawImage(\n      image,\n      0,\n      0,\n      naturalWidth,\n      naturalHeight,\n      (canvas.width - newWidth) / 2,\n      (canvas.height - newHeight) / 2,\n      newWidth,\n      newHeight,\n    );\n\n  };\n\n  onImageChange = e => {\n    const c = document.getElementById(\"canvas\");\n    const ctx = c.getContext(\"2d\");\n    this.cropToCanvas(e.target, c, ctx);\n    let [modelWidth, modelHeight] = this.state.model.inputs[0].shape.slice(1, 3);\n    const input = tf.tidy(() => {\n      return tf.image.resizeBilinear(tf.browser.fromPixels(c), [modelWidth, modelHeight])\n        .div(255.0).expandDims(0);\n    });\n    this.state.model.executeAsync(input).then(res => {\n      // Font options.\n      const font = \"16px sans-serif\";\n      ctx.font = font;\n      ctx.textBaseline = \"top\";\n\n      const [boxes, scores, classes, valid_detections] = res;\n      const boxes_data = boxes.dataSync();\n      const scores_data = scores.dataSync();\n      const classes_data = classes.dataSync();\n      const valid_detections_data = valid_detections.dataSync()[0];\n\n      tf.dispose(res)\n\n      var i;\n      for (i = 0; i < valid_detections_data; ++i){\n        let [x1, y1, x2, y2] = boxes_data.slice(i * 4, (i + 1) * 4);\n        x1 *= c.width;\n        x2 *= c.width;\n        y1 *= c.height;\n        y2 *= c.height;\n        const width = x2 - x1;\n        const height = y2 - y1;\n        const klass = names[classes_data[i]];\n        const score = scores_data[i].toFixed(2);\n\n        // Draw the bounding box.\n        ctx.strokeStyle = \"#00FFFF\";\n        ctx.lineWidth = 4;\n        ctx.strokeRect(x1, y1, width, height);\n\n        // Draw the label background.\n        ctx.fillStyle = \"#00FFFF\";\n        const textWidth = ctx.measureText(klass + \":\" + score).width;\n        const textHeight = parseInt(font, 10); // base 10\n        ctx.fillRect(x1, y1, textWidth + 4, textHeight + 4);\n\n      }\n      for (i = 0; i < valid_detections_data; ++i){\n        let [x1, y1, , ] = boxes_data.slice(i * 4, (i + 1) * 4);\n        x1 *= c.width;\n        y1 *= c.height;\n        const klass = names[classes_data[i]];\n        const score = scores_data[i].toFixed(2);\n\n        // Draw the text last to ensure it's on top.\n        ctx.fillStyle = \"#000000\";\n        ctx.fillText(klass + \":\" + score, x1, y1);\n\n      }\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"Dropzone-page\">\n        {this.state.model ? (\n          <MagicDropzone\n            className=\"Dropzone\"\n            accept=\"image/jpeg, image/png, .jpg, .jpeg, .png\"\n            multiple={false}\n            onDrop={this.onDrop}\n          >\n            {this.state.preview ? (\n              <img\n                alt=\"upload preview\"\n                onLoad={this.onImageChange}\n                className=\"Dropzone-img\"\n                src={this.state.preview}\n              />\n            ) : (\n              \"Choose or drop a file.\"\n            )}\n            <canvas id=\"canvas\" width=\"640\" height=\"640\" />\n          </MagicDropzone>\n        ) : (\n          <div className=\"Dropzone\">Loading model...</div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}